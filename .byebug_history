continue
tracks.first.lectures.first.title == 'Diminuindo tempo de execução de testes em aplicações Rails enterprise'
continue
tracks.first.lectures.first.title
tracks.first.lectures.first 
continue
tracks.first.lectures
track.first.lectures
track.first 
tracks
continue
tracks.first.lectures
tracks.first
tracks
continue
tracks
@tracks
Event.first 
continue
Event.first 
continue
Event.first.tracks
Event.first 
Event.all.count
Event.all
continue
Event.all.count
continue
Event.all.count
Event.all
continue
page.title
page
page.body
page.content 
page
page.teste
page
continue
tracks
continue
lectures
continue
lectures
]lectures
continue
tracks
continue
lectures.first.title
lectures.first
lectures
continue
lectures
continue
lectures
continue
list_lecture
list_lectureslist_lecture
list_lectures
file_contents
continue
file_contents
continue
lecture.errors.messages
lecture.errors
lecture.errors[0]
lecture.errors 
lecture
continue
@tracks
tracks
continue
@tracks
continue
lectures
continue
lectures
continue
    track_data['lectures'].each { |lecture_data| puts lecture_data['time_duration'] }
continue
    track_data['lectures'].each { |lecture_data| puts lecture_data['time_duration'] }
continue
next
continue
track_data
continue
track_data
_data|
   32:       byebug
continue
tracks_json.count
tracks_json
continue
JSON.parse(params[:tracks]).gsub(/([\w]+):/, '"\1":')
JSON.parse(params[:tracks])
JSON.parse(params[:tracks].gsub(/([\w]+):/, '"\1":'))
params[:tracks].gsub(/([\w]+):/, '"\1":')
@tracks.first.title
@tracks.first
@tracks
continue
track.close_lecture_for_lunch
continue
track.close_lecture_for_lunch
track
continue
closest_datetime
continue
closest_datetime
close_datetime
continue
lt.time_scheduled.min
lt.time_scheduled.hour.min
lt.time_scheduled.hour
lt.time_scheduled 
lt.hour
lt
continue
target_time.min
target_time
lt.time_scheduled.min
lt
continue
lt.time_scheduled.hour.min
lt.time_scheduled
lt.time_scheduled.hour 
continue
lectures.min_by { |lt| time_difference(target_time, lt) }
lectures.min_by
lectures
continue
Time.new(0, 1, 0, 12, 0, 0)
DateTime.new(DateTime.now.year, DateTime.now.month, DateTime.now.day, 9, 0, 0) 
target_time
      target_time = Date.new(0, 1, 0, 12, 0, 0)
      target_time = DateTime.new(0, 1, 0, 12, 0, 0)
=>       target_time = DateTime.new(0, 1, 0, 12, 0, 0)
continue
next
continue
next
continue
net
next
session
continue
track.lectures
track 
continue
@event.tracks
@event
continue
exit
continue
base_hour + (lecture.time_duration*60)
base_hour
continue
lecture.time_scheduled 
base_hour
continue
next
continue
lecture.time_scheduled 
continue
Time.new
lecture.time_scheduled 
track.lectures.count
exit
next
continue
track.lectures.count
track.lectures
.count
track.lectures
continue
next
continue
track.lectures
track
continue
@tracks.count
@tracks
continue
track['lectures'].count
continue
track['lectures'].count
track['lectures']
continue
track.lectures.count
track.lectures
continue
track.lectures
continue
@tracks
continue
@tracks
continue
@tracks
continue
@tracks
continue
@event.tracks.first.lectures
@event.tracks.first
@event.tracks
continue
@event.tracks.second
@event.tracks.second.lectures
@event.tracks.first.lectures
@event.tracks.first
@event.tracks.first.lectures
continue
@event.tracks.first.lectures
@event.tracks.first
@event.tracks.first.lectures
@event.tracks.lectures
@event.tracks.first
@event.tracks 
continue
@event.tracks 
continue
@event.tracks.include(:lectures)
@event.tracks 
@event.includes(:lectures).tracks
continue
@event.tracks.to_json
continue
@event.tracks
continue
@event.tracks
continue
@event.tracks
@event.tracks.to_json
@event.tracks
continue
@event.tracks
@event.tracks.count
@event.tracks
continue
@event.tracks
@event
@events
@events.tracks
continue
@events.tracks
continue
@events.tracks
continue
unselected_items_for_another_track.count
continue
unselected_items_for_another_track.count
next
unselected_items_for_another_track.count
exit
continue
selected_lectures_by_morning.count
selected_lectures_by_morning
