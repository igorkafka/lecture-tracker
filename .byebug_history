continue
exit
continue
base_hour + (lecture.time_duration*60)
base_hour
continue
lecture.time_scheduled 
base_hour
continue
next
continue
lecture.time_scheduled 
continue
Time.new
lecture.time_scheduled 
track.lectures.count
exit
next
continue
track.lectures.count
track.lectures
.count
track.lectures
continue
next
continue
track.lectures
track
continue
@tracks.count
@tracks
continue
track['lectures'].count
continue
track['lectures'].count
track['lectures']
continue
track.lectures.count
track.lectures
continue
track.lectures
continue
@tracks
continue
@tracks
continue
@tracks
continue
@tracks
continue
@event.tracks.first.lectures
@event.tracks.first
@event.tracks
continue
@event.tracks.second
@event.tracks.second.lectures
@event.tracks.first.lectures
@event.tracks.first
@event.tracks.first.lectures
continue
@event.tracks.first.lectures
@event.tracks.first
@event.tracks.first.lectures
@event.tracks.lectures
@event.tracks.first
@event.tracks 
continue
@event.tracks 
continue
@event.tracks.include(:lectures)
@event.tracks 
@event.includes(:lectures).tracks
continue
@event.tracks.to_json
continue
@event.tracks
continue
@event.tracks
continue
@event.tracks
@event.tracks.to_json
@event.tracks
continue
@event.tracks
@event.tracks.count
@event.tracks
continue
@event.tracks
@event
@events
@events.tracks
continue
@events.tracks
continue
@events.tracks
continue
unselected_items_for_another_track.count
continue
unselected_items_for_another_track.count
next
unselected_items_for_another_track.count
exit
continue
selected_lectures_by_morning.count
selected_lectures_by_morning
.count
selected_lectures_by_morning
selected_lectures_by_afternoon.count
selected_lectures_by_afternoon
unselected_items_for_another_track.count
unselected_items_for_another_track
continue
tracks.first.lectures
tracks.first 
continue
tracks.first.lectures
tracks.lectures
tracks
continue
tracks.lectures 
tracks.events 
tracks.first
continue
lecture
exit
lecture.time_scheduled
lecture.time_scheduled = Time.new
Time.new
lecture.time_scheduled
lecture.time_scheduled = base_hour
lecture.time_scheduled.hour = base_hour
lecture.time_scheduled.hour = base_hour.hour
teste.time_scheduled.hour = base_hour.hour
lecture.time_scheduled
lecture.time_scheduled.class
exit
lecture.time_scheduled.class
lecture
exit
cls
clear
Date.now
lecture.time_scheduled = Date.now
Date
lecture.time_scheduled = Datetime.now
lecture.time_scheduled 
lecture.time_scheduled = Time.new 
lecture.time_scheduled 
exit
continue
lecture.time_scheduled 
base_hour
continue
selected_lectures_by_morning
exit
continue
teste.time_scheduled.hour.parse( base_hour.hour)
DateTime
teste.time_scheduled.hour = base_hour.hour
base_hour.hour
teste.time_scheduled.hour = base_hour.hour
teste.time_scheduled.hour
base_hour
teste.time_scheduled 
teste.time_scheduled = base_hour
teste.time_scheduled 
base_hour.class
Time.now.class
Time.now.time
Time.now
d = date.now 
d = Date.now
teste.time_scheduled 
teste.time_scheduled = base_hour
teste.time_scheduled 
teste = lecture
lecture 
base_hour 
Time.now.utc
lecture
base_hour
continue
tracks.second
tracks
continue
selected_lectures_by_morning
continue
selected_lectures_by_morning
selected_lectures_by_morning.sum(&:time_duration)
selected_lectures_by_afternoon.sum(&:time_duration)
selected_lectures_by_morning
exit
continue
      teste  = base_hour + (lecture.time_duration*60)
lecture 
continue
base_hour 
lecture 
lecture.time_scheduled 
continue
base_hour
continue
base_hour
base_hour = base_hour.to_i * lecture.time_duration.to_i
base_hour.to_i * lecture.time_duration.to_i
base_hour * lecture.time_duration.to_i
base_hour * lecture.time_duration
base hour * lecture.time_duration
lecture
continue
base_hour * lecture.time_duration
base_hour * 30
base_hour
 base_hour = (60 * lecture.time_duration) 
 base_hour = (base_hour * 60) 
 base_hour = (base_hour * lecture.time_duration) 
   22:       base_hour = (base_hour * lecture.time_duration) 
continue
lectures.sum(&time_duration)
lectures.sort_by(&:time_duration)
lectures.sort_by
lectures.sort_by(:time_duration)
lectures
continue
clear
tracks.second
tracks.first
track.first
track.first.
track.first.title
tracks.count
tracks.first.lectures
tracks.first.lectures.count()
tracks.first.lectures.count
tracks.first.lectures.first
tracks.first.lectures.count
tracks.first.lectures
tracks.first 
tracks.lectures
tracks.events 
tracks
continue
unselected_items_for_another_track.count
continue
unselected_items_for_another_track.count
continue
unselected_items_for_another_track.count
continue
unselected_items_for_another_track.count
continue
unselected_items_for_another_track
unselected_items_for_another_track.count
continue
unselected_items_for_another_track.count
continue
unselected_items_for_another_track.count
